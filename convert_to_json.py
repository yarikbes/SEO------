import pandas as pd
import json
from collections import defaultdict
from datetime import datetime

# –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
file_path = r'e:\–û–±–ª–∞–∫–æ\2. –†–∞–±–æ—Ç–∞\–ë—É–∫–º–∞—Ä–∫–ª–µ—Ç —Ä–∞–∑–∫–ª–æ–∞–∫–∞\URL –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö.xlsx'
df = pd.read_excel(file_path)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—ã —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è —Ç–∏–ø–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü
PAGE_GROUPS = {
    'main': {'aliases': [], 'description': '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞'},
    'privacy': {'aliases': ['privacy', 'privacy-policy', 'privacy-notice'], 'description': '–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏'},
    'terms': {'aliases': ['terms', 'terms-condition'], 'description': '–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'},
    'responsible': {'aliases': ['responsible', 'responsible-gaming'], 'description': '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –∏–≥—Ä–∞'},
    'cookies': {'aliases': ['cookies-policy', 'cookies'], 'description': '–ü–æ–ª–∏—Ç–∏–∫–∞ cookies'},
    'faq': {'aliases': [], 'description': '–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã'},
    'contacts': {'aliases': [], 'description': '–ö–æ–Ω—Ç–∞–∫—Ç—ã'},
    'support': {'aliases': [], 'description': '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'},
    'login': {'aliases': [], 'description': '–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É'},
    'bonus': {'aliases': [], 'description': '–ë–æ–Ω—É—Å—ã'},
    'promoCode': {'aliases': ['promo-code', 'bonus-code'], 'description': '–ü—Ä–æ–º–æ–∫–æ–¥ / –ë–æ–Ω—É—Å –∫–æ–¥'},
    'noDepositBonus': {'aliases': [], 'description': '–ë–æ–Ω—É—Å –±–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–∞'},
    'review': {'aliases': [], 'description': '–û–±–∑–æ—Ä –∫–∞–∑–∏–Ω–æ'},
    'withdrawal': {'aliases': [], 'description': '–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤'},
    'freeSpins': {'aliases': [], 'description': '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è'},
    'app': {'aliases': [], 'description': '–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'},
    'games': {'aliases': [], 'description': '–ò–≥—Ä—ã'},
    'slots': {'aliases': ['slots', 'online-slots'], 'description': '–°–ª–æ—Ç—ã'},
    'lottery': {'aliases': [], 'description': '–õ–æ—Ç–µ—Ä–µ—è'},
    'vipProgram': {'aliases': [], 'description': 'VIP –ø—Ä–æ–≥—Ä–∞–º–º–∞'},
    'verification': {'aliases': [], 'description': '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è'},
    'cashback': {'aliases': [], 'description': '–ö—ç—à–±—ç–∫'},
    'sport': {'aliases': [], 'description': '–°–ø–æ—Ä—Ç'},
    'betting': {'aliases': ['betting', 'sports-betting'], 'description': '–°—Ç–∞–≤–∫–∏ –Ω–∞ —Å–ø–æ—Ä—Ç'}
}

# –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö —Ç–∏–ø–æ–≤ –Ω–∞ –Ω–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã
TYPE_TO_GROUP = {
    'main': 'main',
    'privacy-notice': 'privacy',
    'privacy': 'privacy',
    'privacy-policy': 'privacy',
    'terms': 'terms',
    'terms-condition': 'terms',
    'responsible': 'responsible',
    'responsible-gaming': 'responsible',
    'cookies-policy': 'cookies',
    'cookies': 'cookies',
    'faq': 'faq',
    'contacts': 'contacts',
    'support': 'support',
    'login': 'login',
    'bonus': 'bonus',
    'promo-code': 'promoCode',
    'bonus-code': 'promoCode',
    'no-deposit-bonus': 'noDepositBonus',
    'review': 'review',
    'withdrawal': 'withdrawal',
    'free-spins': 'freeSpins',
    'app': 'app',
    'games': 'games',
    'slots': 'slots',
    'online-slots': 'slots',
    'lottery': 'lottery',
    'vip-program': 'vipProgram',
    'verification': 'verification',
    'cashback': 'cashback',
    'sport': 'sport',
    'betting': 'betting',
    'sports-betting': 'betting',
    '/privacy-notice': 'privacy',
    '/promo-code': 'promoCode',
    '/bonus-code': 'promoCode',
    '/no-deposit-bonus': 'noDepositBonus',
    '/free-spins': 'freeSpins',
    '/vip-program': 'vipProgram',
    'en-GB': 'main'
}

# –°–æ–±–∏—Ä–∞–µ–º —Å–ª–∞–≥–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º
groups_data = defaultdict(lambda: {'slugs': {}})

# –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º
current_page = None
current_type = None

for idx, row in df.iterrows():
    eng_value = df.iloc[idx, 0]  # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç (–ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç - —ç—Ç–æ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if pd.notna(eng_value) and str(eng_value).strip() != '':
        current_page = str(eng_value).strip()
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—É–±–∏—Ä–∞–µ–º —Å–ª–µ—à –≤ –Ω–∞—á–∞–ª–µ –¥–ª—è –ø–æ–∏—Å–∫–∞)
        page_key = current_page.lstrip('/')
        current_type = TYPE_TO_GROUP.get(current_page, TYPE_TO_GROUP.get(page_key, page_key))
        
    # –ï—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    if current_page and current_type:
        for col in df.columns[1:]:  # –í—Å–µ —è–∑—ã–∫–∏ –∫—Ä–æ–º–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
            slug = row[col]
            if pd.notna(slug) and str(slug).strip() != '':
                slug_clean = str(slug).strip()
                # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —Å–ª–∞–≥–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                slug_clean = slug_clean.lstrip('/')
                slug_clean = '/' + slug_clean
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏
                lang = col
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É
                groups_data[current_type]['slugs'][slug_clean] = lang

# –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
current_page = None
current_type = None

for idx, row in df.iterrows():
    eng_value = df.iloc[idx, 0]
    
    if pd.notna(eng_value) and str(eng_value).strip() != '':
        current_page = str(eng_value).strip()
        page_key = current_page.lstrip('/')
        current_type = TYPE_TO_GROUP.get(current_page, TYPE_TO_GROUP.get(page_key, page_key))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
        groups_data[current_type]['slugs'][current_page] = 'en'

# –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
page_groups = {}

for group_key, group_data in groups_data.items():
    # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ PAGE_GROUPS, –±–µ—Ä—ë–º –µ—ë –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if group_key in PAGE_GROUPS:
        page_groups[group_key] = {
            'description': PAGE_GROUPS[group_key]['description'],
            'slugs': group_data['slugs']
        }
        # –î–æ–±–∞–≤–ª—è–µ–º aliases –µ—Å–ª–∏ –µ—Å—Ç—å
        if PAGE_GROUPS[group_key]['aliases']:
            page_groups[group_key]['aliases'] = PAGE_GROUPS[group_key]['aliases']
    else:
        # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–≥–∏
        page_groups[group_key] = {
            'description': group_key,
            'slugs': group_data['slugs']
        }

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
output = {
    "version": "2.0",
    "updated": datetime.now().strftime("%Y-%m-%d"),
    "pageGroups": page_groups
}

json_path = r'e:\–û–±–ª–∞–∫–æ\2. –†–∞–±–æ—Ç–∞\–ë—É–∫–º–∞—Ä–∫–ª–µ—Ç —Ä–∞–∑–∫–ª–æ–∞–∫–∞\slugs.json'
with open(json_path, 'w', encoding='utf-8') as f:
    json.dump(output, f, ensure_ascii=False, indent=2)

print(f"‚úÖ JSON —Å–æ–∑–¥–∞–Ω: {json_path}")
print(f"üìä –í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {len(page_groups)}")
print(f"\nüìù –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:")
for i, (group_key, group_data) in enumerate(page_groups.items(), 1):
    slug_count = len(group_data['slugs'])
    aliases = ', '.join(group_data.get('aliases', [])) if group_data.get('aliases') else '–Ω–µ—Ç'
    print(f"   {i}. {group_key} ({slug_count} —Å–ª–∞–≥–æ–≤, aliases: {aliases})")
